// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model beeusers {
  id                Int         @id @default(autoincrement()) @map("id")
  firstname         String      @map("firstname")
  lastname          String      @map("lastname")
  email             String      @unique @map("email")
  phonenumber       String?     @unique @map("phonenumber")
  password          String      @map("password")
  createdAt         DateTime    @default(now()) @map("created_at")
  confirmationToken String?     @map("confirmation_token")
  isConfirmed       Boolean     @default(false) @map("is_confirmed")
  passportId        String?     @map("passport_id")
  passportFile      String?     @map("passport_file")
  phoneConfirmed    String?     @map("phone_confirmed")
  isProfileComplete Boolean     @default(false)
  googleId          String?     @unique @map("google_id")
  batches           Batch[]
  tokenStats        TokenStats?
  // NextAuth fields
  accounts          Account[]
  sessions          Session[]
  Apiary            Apiary[]

  @@map("beeusers")
}

model Batch {
  id                        String   @id @default(uuid())
  batchNumber               String   @unique
  batchName                 String
  status                    String   @default("Pending")
  containerType             String   @default("Glass")
  labelType                 String   @default("Standard")
  weightKg                  Float    @default(0)
  jarsUsed                  Int      @default(0)
  originOnly                Float    @default(0)
  qualityOnly               Float    @default(0)
  bothCertifications        Float    @default(0)
  uncertified               Float    @default(0)
  originOnlyPercent         Int      @default(0)
  qualityOnlyPercent        Int      @default(0)
  bothCertificationsPercent Int      @default(0)
  uncertifiedPercent        Int      @default(0)
  completedChecks           Int      @default(0)
  totalChecks               Int      @default(4)
  certificationDate         String?
  jarCertifications         Json?    // ADD THIS LINE
  expiryDate                String?
  productionReportPath      String?  @map("production_report_path")
  labReportPath             String?  @map("lab_report_path")
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  userId                    Int

<<<<<<< HEAD
  // Add these missing fields that exist in your database
  honeyCertified           Float?
  honeyRemaining           Float?
  totalHoneyCollected      Float?

=======
>>>>>>> bc4b0064770fda7b4a3ad525998222858d435f08
  user     beeusers @relation(fields: [userId], references: [id])
  apiaries Apiary[]
}

model TokenStats {
  id                 String @id @default(uuid())
  userId             Int    @unique
  totalTokens        Int    @default(0)
  remainingTokens    Int    @default(0)
  originOnly         Float  @default(0)
  qualityOnly        Float  @default(0)
  bothCertifications Float  @default(0)

  beeusers beeusers @relation(fields: [userId], references: [id])
}

model Apiary {
  id             Int    @id @default(autoincrement())
  name           String
  number         String
  hiveCount      Int
  latitude       Float
  longitude      Float
  kilosCollected Float  @default(0)

  batchId   String?
  batch     Batch?   @relation(fields: [batchId], references: [id])
  createdAt DateTime @default(now())

  // Add user association
  // Add user association
  userId Int
  user   beeusers @relation(fields: [userId], references: [id])
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user beeusers @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         beeusers @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
